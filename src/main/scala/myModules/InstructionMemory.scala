package myModules
import chisel3._

class InstructionMemory extends Module {
  val io = IO(new Bundle() {
    val in = Input(UInt(32.W))
    val out = Output(UInt(32.W))
  })

  val memory = Mem(256, UInt(32.W))
  // $1===1, $2===1, $3===1
  //                 funct7   rs2  rs1  funct3 rd    op
  memory.write(0.U, "b00000000000000000000000010010011".U(32.W))
  memory.write(4.U, "b00000000000100000000000100010011".U(32.W))
  memory.write(8.U, "b00000000000100000000001000010011".U(32.W))
  memory.write(12.U, "b00000001010000000000001100010011".U(32.W))
  memory.write(16.U, "b00000000001000001000000110110011".U(32.W))
  memory.write(20.U, "b00000000000100000010000000100011".U(32.W))
  memory.write(24.U, "b00000000001000000010001000100011".U(32.W))
  memory.write(28.U, "b00000000001100100010010000100011".U(32.W))
  memory.write(32.U, "b00000000000100101000001010010011".U(32.W))
  memory.write(36.U, "b01000000000100100101001000010011".U(32.W))
  memory.write(40.U, "b11111110011000101001111011100011".U(32.W))



  /*
  memory.write(0.U,"b0000000_00010_00001_000_00011_0110011".U(32.W))  // $3 = $1 + $2 === 2     ADD
  memory.write(4.U,"b0000000_00010_00011_000_00011_0110011".U(32.W))  // $3 = $2 + $3 === 3
  memory.write(8.U,"b0100000_00010_00011_000_00011_0110011".U(32.W))  // $3 = $3 - $2 === 2     SUB
  memory.write(12.U,"b0000000_00001_00010_111_00011_0110011".U(32.W)) // $3 = $2 & $1 === 1     AND
  memory.write(16.U,"b0000000_00010_00001_000_00011_0110011".U(32.W)) // $3 = $1 + $2 === 2
  memory.write(20.U,"b0000000_00001_00011_110_00011_0110011".U(32.W)) // $3 = $1 or $3 === 3    OR
  memory.write(24.U,"b0000000_00010_00011_000_00011_0010011".U(32.W)) // $3 = $3 + 4 === 5     ADDI
  memory.write(28.U,"b0000000_00100_00011_000_00011_0010011".U(32.W)) // $3 = $3 + 4 === 9     ADDI
  memory.write(32.U,"b0000000_00100_00011_000_00011_0010011".U(32.W)) // $3 = $3 + 4 === 13     ADDI
  memory.write(36.U,"b1111111_11100_00011_000_00011_0010011".U(32.W)) // $3 = $3 + -4 === 9     ADDI
  memory.write(40.U,"b1111111_00011_00011_000_11001_1100011".U(32.W)) // bne
  //memory.write(40.U,"b1111111_10001_11111_111_00100_1101111".U(32.W)) // アドレス24に戻る        JAL
  *//*
  memory.write(40.U,"b1111111_00010_00001_000_11001_1100011".U(32.W)) //                          BEQ
  memory.write(44.U,"b1111111_10001_11111_111_00100_1101111".U(32.W)) // アドレス24に戻る        JAL
  //memory.write(28.U,"b0000000_00001_00001_010_00011_0000011".U(32.W)) // $3 = mem($1+1) === 2  LW (*ALUの結果を出力している)


  */


  io.out := memory(io.in)
}
